'''
На вход программе подается натуральное число N. Оно уже читается в программе командой:
N = int(input())
Объявите в программе функцию-генератор с именем get_sum с сигнатурой:
def get_sum(total): ...
которая бы возвращала текущую сумму чисел последовательности длины total = N
в диапазоне целых чисел [1; N] (включительно).
То есть, при вызове get_sum в качестве аргумента передается переменная N.
В результате должны получить следующие результаты работы функции-генератора:
    при первом вызове get_sum возвращает сумму 1;
    при втором вызове get_sum возвращает сумму чисел 1+2 = 3;
    при третьем вызове get_sum возвращает сумму чисел 1+2+3 = 6;
    ....
    для N-го вызова get_sum возвращает сумму 1+2+...+(N−1)+N1+2+...+(N−1)+N.
Реализовать функцию-генератор get_sum без использования коллекций. Вызывать ее не нужно, только объявить.
'''
# def get_sum(total):
#     s = 0
#     for i in range(1, total+1):
#         s += i
#         yield s
# 
# 
# N = int(input())
# a = get_sum(N)
# for i in a:
#     print(i)


# def get_list():
#     for x in [1, 2, 3, 4]:
#         yield x
#
# d = get_list()
# for i in d:
#     print(i, end=" ")


'''
Мы с вами в заданиях несколько раз генерировали последовательность чисел Фибоначчи, 
которая строится по правилу: каждое последующее число равно сумме двух предыдущих. 
Для разнообразия давайте будем генерировать каждое последующее как сумму трех предыдущих чисел. 
При этом первые три числа равны 1. Получаем такую последовательность:
1, 1, 1, 3, 5, 9, 17, 31, 57, ...
Не знаю, есть ли у нее название, поэтому, в рамках уроков, я скромно назову ее последовательностью Балакирева. 
Итак, на вход программе поступает натуральное число N (N > 5), которое необходимо прочитать и сохранить в переменной. 
Затем (или в начале программы), объявить функцию-генератор с сигнатурой:
def balak_seq(max_len): ...
которая бы возвращала max_len = N первых чисел последовательности Балакирева (включая первые три единицы).
Реализуйте эту функцию без использования коллекций (списков, кортежей, словарей и т.п.). 
Вызовите ее N раз для получения N чисел и выведите полученные числа на экран в одну строчку через пробел.   
'''
# def balak_seq(max_len):
#     a1, a2, a3 = 1, 1, 1
#     for i in range(1,max_len+1):
#         if i < 4:
#             yield 1
#         else:
#             a1,a2,a3 = a2,a3,(a1+a2+a3)
#             yield a3
#
#
# N = int(input())
# seq = balak_seq(N)
# for a in seq:
#     print(a, end=' ')


'''
На вход программе подается натуральное число N (N > 8). Необходимо его прочитать и объявить функцию-генератор, 
которая бы выдавала пароль длиной N символов из случайных букв, цифр и некоторых других знаков. 
Значение N передается в функцию-генератор первым аргументом. Д
ля получения последовательности допустимых символов для генерации паролей в программе импортированы две строки: 
ascii_lowercase, ascii_uppercase (см. листинг ниже), на основе которых формируется общий список:
from string import ascii_lowercase, ascii_uppercase
chars = ascii_lowercase + ascii_uppercase + "0123456789!?@#$*"
Функция-генератор должна при каждом вызове возвращать новый пароль из случайно выбранных 
символов chars длиной N и делать это бесконечно, то есть, вызывать ее можно бесконечное число раз.
Сгенерируйте с помощью функции-генератора первые пять паролей и выведите их в столбик (каждый с новой строки).
Подсказка: сгенерировать случайный индекс indx в диапазоне [a; b] для выбора символа 
из chars можно с помощью функции randint модуля random:
import random
random.seed(1)
indx = random.randint(a, b)
'''
# import random
# from string import ascii_lowercase, ascii_uppercase
#
#
# def rand_pwd(n):
#     chars = ascii_lowercase + ascii_uppercase + "0123456789!?@#$*"
#     l = len(chars)
#     while 1:
#         pwd = ''
#         for i in range(n):
#             pwd = pwd + chars[random.randint(0, l-1)]
#
#         yield pwd
#
#
# n = int(input())
# pwd = rand_pwd(n)
# # установка зерна датчика случайных чисел (не менять)
# random.seed(1)
#
# for i in range(5):
#     print(next(pwd))


'''
На вход программе подается натуральное число N, которое необходимо прочитать и сохранить через переменную. 
Используя строки из латинских букв ascii_lowercase и ascii_uppercase:
from string import ascii_lowercase, ascii_uppercase
chars = ascii_lowercase + ascii_uppercase
объявите функцию-генератор с одним параметром max_size, которая бы возвращала случайно сформированные email-адреса 
с доменом mail.ru и длиной max_size = N символов. Например, при N=6 адрес может выглядеть так: SCrUZo@mail.ru
Функция-генератор должна возвращать бесконечное число таких адресов, то есть, генерировать постоянно. 
Выведите первые пять сгенерированных email и выведите их в столбик (каждый с новой строки).
Подсказка: для формирования случайного индекса для выбора символа из строки chars, 
используйте функцию randint модуля random:
import random
random.seed(1)
indx = random.randint(0, len(chars)-1)
'''
#


'''
Объявите функцию-генератор, которая бы возвращала простые числа. 
(Простое число - это натуральное число, которое делится только на себя и на 1). 
Выведите с помощью этой функции первые 20 простых чисел (начиная с 2) в одну строчку через пробел.
'''
def simple_number():
    yield 2
    n = 3
    while 1:
        fl = 1
        for i in range(2,n):
            if n % i == 0:
                fl = 0
                break
        if fl:
            yield n
        n += 1


number = simple_number()
# number2 = simple_number()
for _ in range(20):
    print(next(number), end=' ')
# print()
# for _ in range(10):
#     print(next(number2), end=' ')